# Steps to Build and Run using Docker Compose:
# 1. Rebuild the app with the updated Dockerfile:
docker compose build app

# 2. Restart the app to apply the changes: After building, bring down the current app and bring it back up:
docker compose down
docker compose up app

# 3. Repeat steps 1 and 2 to rebuild and restart the app with the new Dockerfile changes.

# Steps to Build and Run the Dockerfile directly:
# 1. Build the Dockerfile:
docker build -t <image_name> .

# 1.1 To specify a Dockerfile
docker build -t <image_name> -f <path_to_dockerfile> <context_directory>
docker build -t myapp -f Dockerfile.dev .

# 2. Run the built image: Once the image is built, you can run it with:
docker run --name <container_name> <image_name>

# 3. Optionally, you can add flags such as -d to run the container in detached mode (in the background) or
# -p <host_port>:<container_port> to map ports between the host and container.
docker run -d -p 8080:80 --name myapp-container <image_name>

# If you want to remove the existing image to free up space or ensure it's fully recreated from scratch:
docker image rm <image_name>

# list all docker images
docker images

# set environment variables properly when running the Docker container
docker run -e JDBC_DB_URL=jdbc:postgresql://your_db_host:5432/postgres -e DB_USER=admin -e DB_PASSWORD=1234 your_image_name

# To stop a running Docker container
docker stop <container_name_or_id>

# To restart the container with previous configuration
docker restart <container_name_or_id>

# To list all running Docker containers
docker ps

#  If the container does not stop in the default timeout (10 seconds),
#  you can use the docker kill command to forcefully stop it
docker kill <container_name_or_id>





